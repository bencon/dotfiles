#.then
snippet th "description"
.then((${1:val}) => {
	${2}
})
endsnippet

#.catch
snippet cat "description"
.catch((${1:err}) => {
	${2}
})
endsnippet

#promise
snippet pr "description"
new Promise((resolve${1:, reject}) => {
	${2}
})
endsnippet

#throw default error
snippet thr "description"
throw "someError"
endsnippet

#debugger
snippet d "description"
debugger
endsnippet

#return
snippet r "description"
return
endsnippet

#not return
snippet nr "description"
if (!${1:temp}) {
	return
}
endsnippet

#return
snippet rn "description"
return null
endsnippet

#return true
snippet rt "description"
return true
endsnippet

#return false
snippet rf "description"
return false
endsnippet

#console log
snippet cl "description"
console.log('${1:here}')
endsnippet

#console log no quotes
snippet cln "description"
console.log(${1:here})
endsnippet

#console log before
snippet clb "description"
console.log
endsnippet

#console error
snippet ce "description"
console.error(${1:err})
endsnippet

#logger info
snippet li "description"
logger.log('info', \`${1:val}\`)
endsnippet

#logger err
snippet le "description"
logger.log('error', \`${1:val}\`)
endsnippet

#fixme
snippet f "description"
// FIXME - 
endsnippet

#todo
snippet t "description"
// TODO - 
endsnippet

#################################################### Array methods

#forEach
snippet fe "description"
${1:}.forEach((${2:val}) => {
	${3:}
})
endsnippet

#map
snippet map "description"
${1:}.map((${2:val}) => {
	${3:}
})
endsnippet

#some
snippet sm "description"
${1:}.some((${2:val}) => {
	${3:}
})
endsnippet

#filter
snippet fil "description"
${1:}.filter((${2:val}) => {
	${3:}
})
endsnippet

##########################################################################

#require util
snippet rut "description"
const util = require('util')
endsnippet

#util.inspect
snippet in "description"
util.inspect(${1:val}, {depth:null})
endsnippet

#console log util.inspect
snippet cin "description"
console.log('${1:obj}' + util.inspect(${2:val}, {depth:null}))
endsnippet

#logger log util.inspect
snippet lin "description"
logger.log('info', '${1:obj }' + util.inspect(${2:val}, {depth:null}))
endsnippet

################################################# React & JSX


snippet cn "className"
className="$1"
endsnippet

snippet dp "Default Props" b
${1:`!v expand('%:t:r')`.}defaultProps = {
	$2
};
endsnippet

snippet set "Set State"
this.setState({
	${1}: ${2}
});
endsnippet

snippet props "Get Property" i
this.props.${1}
endsnippet

snippet state "Get State" i
this.state.${1}
endsnippet

##################### Component Lifecycle
snippet cwm "Component Will Mount" b
componentWillMount() {
	$1
}
endsnippet

snippet cdm "Component Did Mount" b
componentDidMount() {
	$1
}
endsnippet

snippet cwrp "Component Will Receive Props" b
componentWillReceiveProps(nextProps) {
	$1
}
endsnippet

snippet scu "Should Component Update" b
shouldComponentUpdate(nextProps, nextState) {
	$1
}
endsnippet

snippet cwu "Component Will Update" b
componentWillUpdate(nextProps, nextState) {
	$1
}
endsnippet

snippet cdu "Component Did Update" b
componentDidUpdate(prevProps, prevState) {
	$1
}
endsnippet

snippet cwu "Component Will Unmount" b
componentWillUnmount() {
	$1
}
endsnippet

snippet ren "Render"
render() {
	return ${1:(
		${2:<div>${3}</div>}
	)}
}
endsnippet


########################################### PropTypes
snippet pt "PropTypes Definition" b
${1:`!v expand('%:t:r')`.}propTypes = {
	${2:className}: ${3:PropTypes.string},
};
endsnippet

snippet  pta "PropTypes Array" w
PropTypes.array${1:,}
endsnippet

snippet   ptb "PropTypes Boolean" w
PropTypes.bool${1:,}
endsnippet

snippet ptf "PropTypes Function" w
PropTypes.func${1:,}
endsnippet

snippet ptn "PropTypes Number" w
PropTypes.number${1:,}
endsnippet

snippet pto "PropTypes Object" w
PropTypes.object${1:,}
endsnippet

snippet pts "PropType String" w
PropTypes.string${1:,}
endsnippet

snippet ptno "PropTypes Node" w
PropTypes.node${1:,}
endsnippet

snippet pte "PropTypes Element" w
PropTypes.element${1:,}
endsnippet

snippet ptio "PropTypes instanceOf" w
PropTypes.instanceOf(${2:PropTypes.string})${1:,}
endsnippet

snippet ptone "PropTypes oneOf" w
PropTypes.oneOf(['$2'$3])${1:,}
endsnippet

snippet ptonet "PropTypes oneOfType" w
PropTypes.oneOfType([
	$2
])${1:,}
endsnippet

snippet ptao "PropTypes arrayOf" w
PropTypes.arrayOf(${2:PropTypes.string})${1:,}
endsnippet

snippet ptoo "PropTypes objectOf" w
PropTypes.objectOf(${2:PropTypes.string})${1:,}
endsnippet

snippet ptsh "PropTyes Shape" w
PropTypes.shape({
	$2
})${1:,}
endsnippet

snippet ir "isRequired" w
isRequired,
endsnippet
